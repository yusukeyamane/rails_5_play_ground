I"(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  ActionCable.ConnectionMonitor = (function() {
    var clamp, now, secondsSince;

    ConnectionMonitor.pollInterval = {
      min: 3,
      max: 30
    };

    ConnectionMonitor.staleThreshold = 6;

    ConnectionMonitor.prototype.identifier = ActionCable.INTERNAL.identifiers.ping;

    function ConnectionMonitor(consumer) {
      this.consumer = consumer;
      this.visibilityDidChange = bind(this.visibilityDidChange, this);
      this.consumer.subscriptions.add(this);
      this.start();
    }

    ConnectionMonitor.prototype.connected = function() {
      this.reset();
      this.pingedAt = now();
      return delete this.disconnectedAt;
    };

    ConnectionMonitor.prototype.disconnected = function() {
      return this.disconnectedAt = now();
    };

    ConnectionMonitor.prototype.received = function() {
      return this.pingedAt = now();
    };

    ConnectionMonitor.prototype.reset = function() {
      return this.reconnectAttempts = 0;
    };

    ConnectionMonitor.prototype.start = function() {
      this.reset();
      delete this.stoppedAt;
      this.startedAt = now();
      this.poll();
      return document.addEventListener("visibilitychange", this.visibilityDidChange);
    };

    ConnectionMonitor.prototype.stop = function() {
      this.stoppedAt = now();
      return document.removeEventListener("visibilitychange", this.visibilityDidChange);
    };

    ConnectionMonitor.prototype.poll = function() {
      return setTimeout((function(_this) {
        return function() {
          if (!_this.stoppedAt) {
            _this.reconnectIfStale();
            return _this.poll();
          }
        };
      })(this), this.getInterval());
    };

    ConnectionMonitor.prototype.getInterval = function() {
      var interval, max, min, ref;
      ref = this.constructor.pollInterval, min = ref.min, max = ref.max;
      interval = 5 * Math.log(this.reconnectAttempts + 1);
      return clamp(interval, min, max) * 1000;
    };

    ConnectionMonitor.prototype.reconnectIfStale = function() {
      if (this.connectionIsStale()) {
        this.reconnectAttempts++;
        if (!this.disconnectedRecently()) {
          return this.consumer.connection.reopen();
        }
      }
    };

    ConnectionMonitor.prototype.connectionIsStale = function() {
      var ref;
      return secondsSince((ref = this.pingedAt) != null ? ref : this.startedAt) > this.constructor.staleThreshold;
    };

    ConnectionMonitor.prototype.disconnectedRecently = function() {
      return this.disconnectedAt && secondsSince(this.disconnectedAt) < this.constructor.staleThreshold;
    };

    ConnectionMonitor.prototype.visibilityDidChange = function() {
      if (document.visibilityState === "visible") {
        return setTimeout((function(_this) {
          return function() {
            if (_this.connectionIsStale() || !_this.consumer.connection.isOpen()) {
              return _this.consumer.connection.reopen();
            }
          };
        })(this), 200);
      }
    };

    ConnectionMonitor.prototype.toJSON = function() {
      var connectionIsStale, interval;
      interval = this.getInterval();
      connectionIsStale = this.connectionIsStale();
      return {
        startedAt: this.startedAt,
        stoppedAt: this.stoppedAt,
        pingedAt: this.pingedAt,
        reconnectAttempts: this.reconnectAttempts,
        connectionIsStale: connectionIsStale,
        interval: interval
      };
    };

    now = function() {
      return new Date().getTime();
    };

    secondsSince = function(time) {
      return (now() - time) / 1000;
    };

    clamp = function(number, min, max) {
      return Math.max(min, Math.min(max, number));
    };

    return ConnectionMonitor;

  })();

}).call(this);
:ET